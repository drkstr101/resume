/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package drkstr101.resume.plugin

import org.gradle.testfixtures.ProjectBuilder

import drkstr101.resume.plugin.model.Resume
import spock.lang.Specification

/**
 * A simple unit test for the 'drkstr101.resume.plugin.greeting' plugin.
 */
public class ModelProviderTest extends Specification {
	def canProvideResumeModel() {
		given:
		def project = ProjectBuilder.builder().build()
		def newInstance = project.objects.&newInstance

		ResumeExtension resume = newInstance(ResumeExtension)
		resume.skills << newInstance(SkillExtension, "sk1")
		resume.skills << newInstance(SkillExtension, "sk2")
		
		resume.references << newInstance(ReferenceExtension, "ref1")
		resume.references << newInstance(ReferenceExtension, "ref2")
		
		resume.accomplishments << newInstance(AccomplishmentExtension, "aca")
				.tap { skills = ['sk1']; references = ['ref1', 'ref2'] }
		resume.accomplishments << newInstance(AccomplishmentExtension, "acb")
				.tap { skills = ['sk1', 'sk2']; references = ['ref2'] }
		resume.accomplishments << newInstance(AccomplishmentExtension, "acc")
			.tap { skills = ['sk2'] }
		
		resume.employers << newInstance(EmploymentExtension, "ema")
				.tap { accomplishments = ['aca'] }
		resume.employers << newInstance(EmploymentExtension, "emb")
				.tap { accomplishments = ['acb'] }
		
		when:
		Resume model = new ResumeModelProvider(resume).get()

		then:
		assert model != null
		
		// Assert skills
		assert !model.skillsByName.isEmpty()
		assert model.skillsByName.sk1.name == "sk1"
		assert model.skillsByName.sk2.name == "sk2"
		
		// Assert references
		assert !model.references.isEmpty()
		assert model.referenceNamed('ref1') != null
		assert model.referenceNamed('ref2') != null
		
		// Assert accomplishments
		assert !model.accomplishments.isEmpty()
		assert model.accomplishmentNamed('aca') != null
		assert model.accomplishmentNamed('acb') != null
		assert model.accomplishmentNamed('acc') != null
		
		assert model.accomplishmentNamed('aca')
				.skills
				.collect({ it.name }) == ["sk1"]
		assert model.accomplishmentNamed('aca')
				.references
				.collect({ it.name }) == ["ref1", "ref2"]
				
		assert model.accomplishmentNamed('acb')
				.skills
				.collect({ it.name }) == ["sk1", "sk2"]
		assert model.accomplishmentNamed('acb')
				.references
				.collect({ it.name }) == ["ref2"]
		
		assert model.accomplishmentNamed('acc')
				.skills
				.collect({ it.name }) == ["sk2"]
		assert model.accomplishmentNamed('acc')
				.references.isEmpty()
			
		
		// Assert employers
		assert !model.employers.isEmpty()
		assert model.employmentNamed('ema') != null
		assert model.employmentNamed('emb') != null
		
		assert model.employmentNamed('ema')
				.accomplishments
				.collect({ it.name }) == ["aca"]
				
		assert model.employmentNamed('emb')
				.accomplishments
				.collect({ it.name }) == ["acb"]
	}
}
